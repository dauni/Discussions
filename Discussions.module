<?php namespace ProcessWire;

/**
 * ProcessWire Discussions module
 *
 * Provides simple discussion board using native ProcessWire pages
 *
 * Basic Example usage:
 *
 * add two templates files, discussions-forum.php and discussions-topic.php.
 * Then add $modules->get("Discussions")->renderForum() and
 * $modules->get("Discussions")->renderTopic() respectively to those template files.
 * ->render() recognises the right function to use
 *
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */


/**
 * ProcessWire module that provides pagination for PageArray types
 *
 */
class Discussions extends WireData implements Module {

    public static function getModuleInfo() {
        return array(
            'title' => 'Discussions',
            'summary' => 'Provides simple discussions board',
            'version' => 100,
            'permanent' => false,
            'singular' => true,
            'autoload' => true,
        );
    }

    public function init() {

        // Discussions requires logged in users (at least for now)
        if ($this->user->isGuest()) return false;

    }

    public function ready() {

        // Only templates where we could have discussions input are discussions-forum & -topic
        if (!($this->page->template->name == "discussions-topic" || $this->page->template->name == "discussions-forum")) return false;

        // If there is no post params, no need to go further
        if (count($this->input->post) === 0) return false;

        // Process new post
        #$this->processInput();
        $this->addHookAfter('Page::render', $this, 'processInput');
    }

    public function render() {

        $out = "<div id='discussions'>";
        if ($this->page->template->name == "discussions-forum") {
            $out .= $this->renderForum();
        }

        if ($this->page->template->name == "discussions-topic") {
            $out .= $this->renderTopic();
        }

        $out .= "</div>";
        return $out;
    }

    public function renderForum() {

        #$page = wire('page');
        $out = '';

        if ($this->page->numChildren) {

            $limit = $this->page->discussions_pagination;
            $results = $this->page->children("sort=-modified, limit=$limit");
            $pagination = $results->renderPager(array(
                'nextItemLabel' => "Next",
                'previousItemLabel' => "Prev",
                'currentItemClass' => "uk-active",
                'listMarkup' => "<ul class='uk-pagination'>{out}</ul>",
                'itemMarkup' => "<li class='{class}'>{out}</li>",
                'linkMarkup' => "<a href='{url}'><span>{out}</span></a>"
            ));
            $out .= $pagination;

            $out .= "<ul class='uk-list uk-list-striped'>";

            foreach ($results as $child) {
                $repliesCount = $child->children()->count();
                $lastReply = $child->children()->last();
                $pagePrefix = '';
                $pageNum = $this->_countLastPage($child);
                if ($pageNum > 0) {
                    $pagePrefix = wire('config')->pageNumUrlPrefix . $pageNum;
                }
                $out .= "<li><p><a href='{$child->url}{$pagePrefix}'>{$child->title}</a> (Started by <strong>{$child->discussions_author->name}</strong>.)";
                if ($repliesCount > 0) {
                    $out .= "<span class='discussions-lastreply'>$repliesCount replies, last by {$lastReply->discussions_author->name}</span>";
                }
                $out .= "</p></li>";
            }

            $out .= "</ul>";

            $out .= $pagination;
        }

        $out .= $this->renderForm("topic");

        return $out;
    }

    private function _countLastPage($topic) {

        $replies = $topic->children()->count();
        $pagination = $topic->parent()->discussions_pagination;

        if ($replies > $pagination && $pagination > 0) {
            $pageNum = (int)(($replies - 1) / $pagination);
            $pageNum++;
            return $pageNum;
        } else {
            return 0;
        }
    }

    public function renderForm($type) {
        if ($this->user->isGuest()) {
            if ($type == "topic") return "<p>You have to log in to start new topics.</p>";
            if ($type == "reply") return "<p>You have to log in to reply.</p>";
        }

        $out = '';
        $discussions_title = '';
        $discussions_message = '';

        $out .= "<form class='discussions-form' action='{$this->page->url}' method='post'>";
        $out .= "<div class='discussions-information'>";
        $out .= "<div class='discussions-author'>{$this->user->name}</div>";
        $out .= "</div>";

        $out .= "<div class='discussions-message'>";
        if ($type == "topic") {
            if ($this->input->get->empty_title) {
                $discussions_title = $this->sanitizer->text($this->session->discussions_title);
                $discussions_title = filter_var($discussions_title, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
            }
            $out .= "<label for='discussions_title'>Subject</label><input class='uk-input' type='text' id='discussions_title' name='discussions_title' value='$discussions_title' />";
        }

        if ($this->input->get->empty_message) {
            $discussions_message = $this->sanitizer->textarea($this->session->discussions_message);
            $discussions_message = filter_var($discussions_message, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
        }
        $out .= "<label for='discussions_message'>Write message:</label><textarea cols='50' rows='8' name='discussions_message' class='uk-textarea'>$discussions_message</textarea>";
        $out .= "<br><input type='submit' name='discussions_submit' />";
        $out .= "</div>";
        $out .= "</form>";

        $this->session->remove('discussions_title');
        $this->session->remove('discussions_message');

        return $out;
    }

    public function renderTopic($options = array()) {

        $limit = $this->page->parent->discussions_pagination;
        $results = $this->page->children("template=discussions-reply, sort=created, limit=$limit");
        $out = '';

        $pagination = $results->renderPager(array(
            'nextItemLabel' => "Next",
            'previousItemLabel' => "Prev",
            'currentItemClass' => "uk-active",
            'listMarkup' => "<ul class='uk-pagination'>{out}</ul>",
            'itemMarkup' => "<li class='{class}'>{out}</li>",
            'linkMarkup' => "<a href='{url}'><span>{out}</span></a>"
        ));
        $out .= $pagination;

        $out .= '<ul class="uk-comment-list">';
        // If we are on a first page, add actual start message in
        if ($results->getStart() === 0)
            $out .= $this->renderReply($this->page, 'first');

        $i = 0;
        foreach ($results as $reply) {
            if ($i++ == $results->getTotal())
                $out .= $this->renderReply($reply, 'last');
            else
                $out .= $this->renderReply($reply);
        }
        $out .= '</ul>';

        $out .= $pagination;

        $out .= $this->renderForm("reply");

        return $out;
    }

    public function renderReply($reply, string $pos = null) {

        /*$out = "\n\n<div class='discussions-reply'>";
        $out .= "\n\t<div class='discussions-information'><span class='discussions-author'>{$reply->discussions_author->name}</span><span class='discussions-datetime'>" . date("d.m.Y H:i", $reply->created) . "</span></div>";
        $out .= "\n\t<div class='discussions-message'>$reply->discussions_message</div>";
        $out .= "\n</div>";

        return $out;*/
        return $this->files->render("_disc_reply.php", array('reply' => $reply, 'pos' => $pos));
    }

    /*
     * This just counts if there is active pagination - information used to link or redirect to latest page of discussion topics
     *
    **/

    public function processInput() {

        $post = wire('input')->post;

        $newPost = new Page;
        $newPost->parent = $this->page;

        // If message was empty, we redirect and add possible title as get parameter
        if (!$post->discussions_message) {
            $this->session->discussions_title = $post->discussions_title;
            $this->session->redirect($this->page->url . "?empty_title=1");
        }


        // If template is -forum, then we are creating a new topic, then it is a new topic rather than just a reply
        if ($this->page->template->name == "discussions-forum") {

            // If title was missing, redirect and add message
            if (!$post->discussions_title) {
                $this->session->discussions_message = $post->discussions_message;
                $this->session->redirect($this->page->url . "?empty_message=1");
            }

            $newPost->template = $this->templates->get('discussions-topic');
            $newPost->title = $this->sanitizer->text($post->discussions_title);
            $newPost->name = $this->sanitizer->pageName($post->discussions_title, true);
        } else {
            $newPost->template = $this->templates->get('discussions-reply');
            $newPost->title = $this->sanitizer->text($post->discussions_message);
            $newPost->name = md5(time() . $this->user->name);
        }

        $newPost->discussions_message = $this->sanitizer->textarea($post->discussions_message);
        $newPost->discussions_author = $this->user;
        $newPost->save();

        // We save the parent page just to make it last modified
        $this->page->setOutputFormatting(false);
        $this->page->save();

        // After saving new reply we redirect to prevent double posts
        if ($post->discussions_title) {
            $this->session->redirect($this->page->url . $this->sanitizer->pageName($post->discussions_title, true));
        } else {
            // Redirect to last page there is
            $pageNum = $this->_countLastPage($this->page);
            if ($pageNum > 0) $this->session->redirect($this->page->url . wire('config')->pageNumUrlPrefix . $pageNum);
            else $this->session->redirect($this->page->url);
        }
    }

    public function ___install() {

        // Check that there are no required templates & fields already...
        $this->_checkInstall();

        $field_author = new Field();
        $field_author->type = $this->modules->get("FieldtypePage");
        $field_author->name = 'discussions_author';
        $field_author->label = 'User';
        $field_author->derefAsPage = 1;
        $field_author->parent_id = $this->user->parent->id;
        $field_author->labelFieldName = 'name';
        $field_author->inputfield = 'InputfieldSelect';
        $field_author->required = 1;
        $field_author->save();

        $field_message = new Field();
        $field_message->type = $this->modules->get("FieldtypeTextarea");
        $field_message->name = 'discussions_message';
        $field_message->label = 'Message';
        $field_message->textformatters = array('TextformatterMarkdownExtra');
        $field_message->save();

        $field_pagination = new Field();
        $field_pagination->type = $this->modules->get("FieldtypeInteger");
        $field_pagination->name = 'discussions_pagination';
        $field_pagination->label = 'Number of replies or topics shown at the time';
        $field_pagination->required = 1;
        $field_pagination->save();

        $fieldgroup_forum = new Fieldgroup();
        $fieldgroup_forum->name = 'discussions-forum';
        $fieldgroup_forum->add($this->fields->get('title'));
        $fieldgroup_forum->add($field_pagination); // language_files
        $fieldgroup_forum->save();

        $fieldgroup_topic = new Fieldgroup();
        $fieldgroup_topic->name = 'discussions-topic';
        $fieldgroup_topic->add($this->fields->get('title'));
        $fieldgroup_topic->add($field_message);
        $fieldgroup_topic->add($field_author);
        $fieldgroup_topic->save();

        $fieldgroup_reply = new Fieldgroup();
        $fieldgroup_reply->name = 'discussions-reply';
        $fieldgroup_reply->add($this->fields->get('title'));
        $fieldgroup_reply->add($field_message);
        $fieldgroup_reply->add($field_author);
        $fieldgroup_reply->save();

        $template_forum = new Template();
        $template_forum->name = 'discussions-forum';
        $template_forum->fieldgroup = $fieldgroup_forum;
        $template_forum->slashUrls = 1;
        $template_forum->allowPageNum = 1;
        $template_forum->pageLabelField = 'title';
        $template_forum = $template_forum->save();

        $template_topic = new Template();
        $template_topic->name = 'discussions-topic';
        $template_topic->fieldgroup = $fieldgroup_topic;
        $template_topic->parentTemplates = array($template_forum->id);
        $template_topic->slashUrls = 1;
        $template_topic->allowPageNum = 1;
        $template_topic->pageLabelField = 'title';
        $template_topic = $template_topic->save();

        $template_reply = new Template();
        $template_reply->name = 'discussions-reply';
        $template_reply->fieldgroup = $fieldgroup_reply;
        $template_reply->parentTemplates = array($template_topic->id);
        $template_reply->slashUrls = 1;
        $template_reply->noChildren = 1;
        $template_reply->pageLabelField = 'discussions_message';
        $template_reply->save();

        $template_forum->childTemplates = array($template_topic->id);
        $template_forum->save();

        $template_topic->childTemplates = array($template_reply->id);
        $template_topic->save();

    }

    /**
     * @return bool
     * @throws WireException
     */
    private function _checkInstall() {
        if ($this->templates->get('discussions-forum'))
            throw new WireException("There is already a template installed called 'discussions-forum'");

        if ($this->templates->get('discussions-topic'))
            throw new WireException("There is already a template installed called 'discussions-topic'");

        if ($this->templates->get('discussions-reply'))
            throw new WireException("There is already a template installed called 'discussions-reply'");

        if ($this->fields->get('discussions_author'))
            throw new WireException("There is already a field installed called 'discussions_author'");

        if ($this->fields->get('discussions_message'))
            throw new WireException("There is already a field installed called 'discussions_message'");

        if ($this->fields->get('discussions_pagination'))
            throw new WireException("There is already a field installed called 'discussions_pagination'");

        return true;
    }

    public function ___uninstall() {
        $discussions_pages = wire('pages')->find('template=discussions-forum|discussions-topic|discussions-reply')->count();
        if ($discussions_pages > 0)
            throw new WireException("There are pages using discussions- templates. Remove those first before uninstall");

        $templates = $this->templates;
        $templates->delete($templates->get('discussions-forum'));
        $templates->delete($templates->get('discussions-topic'));
        $templates->delete($templates->get('discussions-reply'));

        $fieldgroups = wire('fieldgroups');
        $fields = wire('fields');
        foreach ($fields->get('discussions_author')->getFieldgroups() as $fieldgroup) {
            $fieldgroups->delete($fieldgroup);
        }
        foreach ($fields->get('discussions_pagination')->getFieldgroups() as $fieldgroup) {
            $fieldgroups->delete($fieldgroup);
        }
        $fields->delete($fields->get('discussions_author'));
        $fields->delete($fields->get('discussions_message'));
        $fields->delete($fields->get('discussions_pagination'));
    }

}

